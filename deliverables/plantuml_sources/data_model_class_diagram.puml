@startuml complete_class_diagram
title Complete Project Class Diagram

!define DATACLASS class

' ========== DATA MODEL CLASSES (schemas.py) ==========
package "app.models.schemas" {

    DATACLASS Intersection {
        +id: str
        +latitude: float
        +longitude: float
    }

    DATACLASS Courrier {
        +id: str
        +name: str
    }

    DATACLASS RoadSegment {
        +start: Intersection | str
        +end: Intersection | str
        +length_m: float
        +travel_time_s: int
        +street_name: str
        --
        +calculate_time(): int
    }

    DATACLASS Delivery {
        +pickup_addr: str | Intersection
        +delivery_addr: str | Intersection
        +pickup_service_s: int
        +delivery_service_s: int
        +warehouse: Optional[Intersection]
        +courier: Optional[Courrier]
        +hour_departure: Optional[str]
        +id: Optional[str]
    }

    DATACLASS Tour {
        +courier: Courrier
        +deliveries: List[Tuple[str, str]]
        +total_travel_time_s: int
        +total_service_time_s: int
        +total_distance_m: float
        +route_intersections: List[str]
        --
        +add_delivery(pickup_addr: str, delivery_addr: string): void
        +add_deliveries(deliveries: List[Tuple[str,str]]): void
    }

    DATACLASS Map {
        +intersections: List[Intersection]
        +road_segments: List[RoadSegment]
        +couriers: List[Courrier]
        +deliveries: List[Delivery]
        +adjacency_list: Dict[str, List[Tuple[Intersection, RoadSegment]]]
        --
        +add_intersection(intersection: Intersection): void
        +add_road_segment(segment: RoadSegment): void
        +add_delivery(delivery: Delivery): void
        +add_courier(courier: Courrier): void
        +build_adjacency(): void
    }

}

' ========== SERVICE CLASSES ==========
package "app.services" {

    class XMLParser {
        -{static} _id_counter: int
        --
        +{static} generate_id(): str
        +{static} parse_deliveries(file_path: str): List[Delivery]
        +{static} parse_map(file_path: str): Map
    }

}

' ========== ALGORITHM CLASSES ==========
package "app.utils.TSP" {

    class Astar {
        +alpha: float
        +nodes: Dict[str, Tuple[float, float]]
        +adj: Dict[str, Dict[str, float]]
        +edges: List
        --
        +__init__(alpha: float = 0.5)
        +load_data(): void
        +heuristic(a: str, b: str): float
        +find_shortest_path(start: str, goal: str): Tuple[List[str], float]
        +compute_shortest_paths_graph(): Dict
    }

    class TSP {
        +astar: Astar
        --
        +__init__()
        +solve(nodes=None): Tuple[List[str], float]
    }

    note right of TSP : Two implementations:\n- TSP.py (standard)\n- TSP_networkx.py (with NetworkX)
    TSP ..> Astar : uses
}

' ========== CONFIGURATION CLASS ==========
package "app.core" {

    class Settings {
        +PROJECT_NAME: str
        +VERSION: str
        +DESCRIPTION: str
        +API_V1_STR: str
        +ALLOWED_HOSTS: List[str]
        +ENVIRONMENT: str
        +DEBUG: bool
        +DATABASE_URL: str
        --
        +Config: class
    }

}

' ========== RELATIONSHIPS ==========

' ========== API ENDPOINTS (app.api.endpoints) ==========
package "app.api.endpoints" {

    class MapAPI {
        +POST /map/ : upload_map(file)
        +GET  /map/ : get_map()
        +GET  /map/ack_pair : ack_pair(pickup_lat,pickup_lng,delivery_lat,delivery_lng)
    }

    class RequestsAPI {
        +GET  /requests/ : list_requests()
        +POST /requests/ : add_request(json)
        +DELETE /requests/{id} : delete_request(id)
        +POST /requests/upload : upload_requests_file(file)
        +PATCH /requests/{id}/assign : assign_courier(id, payload)
    }

    class CouriersAPI {
        +GET  /couriers/ : list_couriers()
        +POST /couriers/ : add_courier(json)
        +DELETE /couriers/{id} : delete_courier(id)
    }

    class ToursAPI {
        +POST /tours/compute : compute_all_tours()
        +POST /tours/compute/{courier_id} : compute_tour(courier_id)
        +GET  /tours/ : list_tours()
        +GET  /tours/{courier_id} : get_tour(courier_id)
        +POST /tours/save : save_tours()
    }

    class DeliveriesAPI {
        +GET  /deliveries/ : list_deliveries()
        +POST /deliveries/ : upload_deliveries_file(file)
    }

    class SavedToursAPI {
        +GET  /saved_tours/ : list_saved_tours()
        +POST /saved_tours/save : save_current_as_named(payload)
        +POST /saved_tours/load : load_named_snapshot(payload)
    }

    class StateAPI {
        +GET    /state/ : get_state()
        +DELETE /state/clear_state : clear_state()
    }

    ' Link API classes to model packages for clarity
    MapAPI ..> "app.models.schemas.Map"
    RequestsAPI ..> "app.models.schemas.Delivery"
    CouriersAPI ..> "app.models.schemas.Courrier"
    ToursAPI ..> "app.models.schemas.Tour"
    SavedToursAPI ..> "app.core.state"
    StateAPI ..> "app.core.state"

}

' Core relationships
RoadSegment <-- Intersection : end/start
Delivery -- Intersection : pickup_addr
Delivery -- Intersection : delivery_addr
Delivery -- Courrier : courier

' Tour relationships
Tour ..> Courrier : affected to
Tour --> Delivery : contains deliveries (as pickup/delivery id pairs)

' Map relationships (composition)
Map -- Intersection : intersections
Map -- RoadSegment : road_segments


Map <-- Courrier : can display
Map --> Delivery : displays

' Service dependencies
XMLParser ..> Map : creates
XMLParser ..> Delivery : creates
XMLParser ..> Intersection : creates
XMLParser ..> RoadSegment : creates

' Algorithm dependencies
Astar ..> XMLParser : uses
Astar ..> Intersection : operates on



' Notes
note top of Map : Central container for all geographic\nand delivery data with adjacency graph

note top of XMLParser : Static utility class for parsing\nXML delivery and map files

note top of Astar : A* pathfinding algorithm with\nconfigurable heuristic blending

note top of Settings : Application configuration\nusing Pydantic BaseSettings

@enduml